def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader -> localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def debugProperties = new Properties()
def debugPropertiesFile = rootProject.file('debug-keystore.properties')
if (debugPropertiesFile.exists()) {
    debugProperties.load(new FileInputStream(debugPropertiesFile))
}

def releaseProperties = new Properties()
def releasePropertiesFile = rootProject.file('release-keystore.properties')
if (releasePropertiesFile.exists()) {
    releaseProperties.load(new FileInputStream(releasePropertiesFile))
}


apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 33

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.meeting.meeting_room"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        debug {
            keyAlias debugProperties['keyAlias']
            keyPassword debugProperties['keyPassword']
            storeFile debugProperties['storeFile'] ? file(debugProperties['storeFile']) : null
            storePassword debugProperties['storePassword']
        }
        release {
            keyAlias releaseProperties['keyAlias']
            keyPassword releaseProperties['keyPassword']
            storeFile releaseProperties['storeFile'] ? file(releaseProperties['storeFile']) : null
            storePassword releaseProperties['storePassword']
        }
    }

    flavorDimensions "default"
    productFlavors {
        production {
            dimension "default"
            applicationIdSuffix ""
            manifestPlaceholders = [appName: "Meeting Room"]
        }
        staging {
            dimension "default"
            applicationIdSuffix ".stg"
            manifestPlaceholders = [appName: "Meeting Room[STG]"]
        }
        development {
            dimension "default"
            applicationIdSuffix ".dev"
            manifestPlaceholders = [appName: "Meeting Room[DEV]"]
        }
    }


    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }
    lint {
        checkReleaseBuilds false
    }
}

flutter {
    source '../..'
}

dependencies {}
